// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  name         String
  cpf          String   @unique
  birth        String
  phone        String
  pronoun      String
  admin        Boolean  @default(false)
  image        String?  @db.Text
  google_id    String?  @unique
  google_token String?  @db.Text
  address_id   Int?
  address      Address? @relation(name: "AddressToUser")
}

model Product {
  id            Int         @id @default(autoincrement())
  active        Boolean     @default(true)
  sku           String      @unique
  name          String
  description   String      @db.Text
  technical     String      @db.Text
  brand         String
  stock         Int         @default(0)
  price         Float
  promotion     Float       @default(0)
  profit        Float       @default(100)
  cost          Float
  rating        Float       @default(0)
  ratings       Int         @default(0)
  sold          Int         @default(0)
  cover_url     String
  gallery       Image[]     @relation(name: "ImageToProduct")
  variations    Variation[] @relation(name: "ProductToVariation")
  dimensions_id Int         @unique
  dimensions    Dimensions  @relation(name: "DimensionsToProduct", fields: [dimensions_id], references: [id], onDelete: Cascade)
  categories    Category[]  @relation(name: "CategoryToProduct")
  supplier_id   Int
  supplier      Supplier    @relation(name: "ProductToSupplier", fields: [supplier_id], references: [id], onDelete: Cascade)
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String
  product_id Int?
  product    Product? @relation(name: "ImageToProduct", fields: [product_id], references: [id], onDelete: Cascade)
  option_id  Int?
  option     Option?  @relation(name: "ImageToOption", fields: [option_id], references: [id], onDelete: Cascade)
}

model Variation {
  id       Int       @id @default(autoincrement())
  type     String    @unique
  options  Option[]  @relation(name: "OptionToVariation")
  products Product[] @relation(name: "ProductToVariation")
}

model Option {
  id            Int         @id @default(autoincrement())
  name          String
  cover_url     String?
  sku           String?
  price         Float?
  promotion     Float?
  stock         Int?
  dimensions_id Int?        @unique
  dimensions    Dimensions? @relation(name: "DimensionsToOption", fields: [dimensions_id], references: [id], onDelete: Cascade)
  gallery       Image[]     @relation(name: "ImageToOption")
  variation_id  Int
  variation     Variation   @relation(name: "OptionToVariation", fields: [variation_id], references: [id], onDelete: Cascade)
}

model Dimensions {
  id         Int      @id @default(autoincrement())
  weight     Float
  height     Float
  length     Float
  width      Float
  product_id Int?
  product    Product? @relation(name: "DimensionsToProduct")
  option_id  Int?
  option     Option?  @relation(name: "DimensionsToOption")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String?   @db.Text
  products Product[] @relation(name: "CategoryToProduct")
}

model Log {
  id        Int    @id @default(autoincrement())
  text      String
  timestamp String
}

model Supplier {
  id         Int       @id @default(autoincrement())
  name       String
  cnpj       String
  code       String
  contact_id Int       @unique
  contact    Contact   @relation(name: "ContactToSupplier", fields: [contact_id], references: [id], onDelete: Cascade)
  products   Product[] @relation(name: "ProductToSupplier")
}

model Contact {
  id          Int       @id @default(autoincrement())
  name        String
  phone       String?
  email       String?
  supplier_id Int?
  supplier    Supplier? @relation(name: "ContactToSupplier")
}

model Address {
  id       Int    @id @default(autoincrement())
  cep      String
  street   String
  number   String
  district String
  uf       String
  city     String
  user_id  Int    @unique
  user     User   @relation(name: "AddressToUser", fields: [user_id], references: [id], onDelete: Cascade)
}
